import os
import asyncio
import logging
import heapq
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Dict
from dotenv import load_dotenv
from openai import AsyncOpenAI
from telegram import Update, Message
from telegram.constants import ChatAction, ChatType
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters,
    JobQueue,
    Application,
)
import json
from pathlib import Path
from chat_manager import ChatManager

load_dotenv()
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
USERS = os.getenv("USERS", "*")
ALLOWED_CHATS = os.getenv("ALLOWED_CHATS", "*")
THREAD_LIFETIME_HOURS = int(os.getenv("THREAD_LIFETIME_HOURS", "24"))

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –±–∞–Ω–æ–≤
BANNED_USERS = {}
BANNED_CHATS = {}

# –ü–∞—Ä—Å–∏–Ω–≥ BANNED_USERS
banned_users_str = os.getenv("BANNED_USERS", "")
if banned_users_str:
    try:
        for ban_entry in banned_users_str.split(","):
            if ":" in ban_entry:
                user_id, reason = ban_entry.strip().split(":", 1)
                BANNED_USERS[int(user_id.strip())] = reason.strip()
    except Exception as e:
        logging.error(f"Error parsing BANNED_USERS: {e}")

# –ü–∞—Ä—Å–∏–Ω–≥ BANNED_CHATS
banned_chats_str = os.getenv("BANNED_CHATS", "")
if banned_chats_str:
    try:
        for ban_entry in banned_chats_str.split(","):
            if ":" in ban_entry:
                chat_id, reason = ban_entry.strip().split(":", 1)
                BANNED_CHATS[int(chat_id.strip())] = reason.strip()
    except Exception as e:
        logging.error(f"Error parsing BANNED_CHATS: {e}")

# –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if USERS != "*":
    USERS = [user.strip() for user in USERS.split(",")]
if ALLOWED_CHATS != "*":
    ALLOWED_CHATS = [int(chat_id.strip()) for chat_id in ALLOWED_CHATS.split(",")]

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
bot_info = None

# –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
chat_manager = ChatManager()


@dataclass
class ThreadInfo:
    thread_id: str
    last_access: datetime
    user_id: int

    def __lt__(self, other):
        return self.last_access < other.last_access


# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–¥–∞—Ö
thread_heap = []  # heap –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ä—ã–º —Ç—Ä–µ–¥–∞–º
user_threads: Dict[int, ThreadInfo] = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ user_id


async def cleanup_old_threads():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç—Ä–µ–¥–æ–≤"""
    while True:
        try:
            current_time = datetime.now()

            while thread_heap and current_time - thread_heap[0].last_access > timedelta(
                hours=THREAD_LIFETIME_HOURS
            ):
                oldest_thread = heapq.heappop(thread_heap)
                try:
                    # –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–¥ –≤ OpenAI
                    await client.beta.threads.delete(oldest_thread.thread_id)
                    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if oldest_thread.user_id in user_threads:
                        del user_threads[oldest_thread.user_id]
                    logging.info(
                        f"Deleted thread {oldest_thread.thread_id} "
                        f"for user {oldest_thread.user_id} due to inactivity"
                    )
                except Exception as e:
                    logging.error(f"Error deleting thread: {e}")
                    # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫—É—á—É
                    heapq.heappush(thread_heap, oldest_thread)
                    break

        except Exception as e:
            logging.error(f"Error in cleanup process: {e}")

        await asyncio.sleep(3600)


async def update_thread_access(user_id: int, thread_id: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–¥—É"""
    current_time = datetime.now()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ThreadInfo
    thread_info = ThreadInfo(
        thread_id=thread_id, last_access=current_time, user_id=user_id
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_threads[user_id] = thread_info

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É—á—É
    heapq.heappush(thread_heap, thread_info)


async def check_thread_exists(thread_id):
    try:
        await client.beta.threads.messages.list(thread_id=thread_id)
        return True
    except Exception as e:
        logging.warning(f"Thread {thread_id} not found: {e}")
        return False


async def should_bot_respond(
    message: Message, context: ContextTypes.DEFAULT_TYPE
) -> bool:
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in BANNED_USERS:
        await message.reply_text(
            f"‚õîÔ∏è –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {BANNED_USERS[user_id]}"
        )
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω —á–∞—Ç–∞
    if chat_id in BANNED_CHATS:
        await message.reply_text(
            f"‚õîÔ∏è –≠—Ç–æ—Ç —á–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {BANNED_CHATS[chat_id]}"
        )
        return False

    # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.chat.type == ChatType.PRIVATE:
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç
    if ALLOWED_CHATS != "*" and chat_id not in ALLOWED_CHATS:
        return False

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot_info
    global bot_info

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if (
        message.reply_to_message
        and message.reply_to_message.from_user.id == bot_info.id
    ):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                username = message.text[entity.offset : entity.offset + entity.length]
                if username.lower() == f"@{bot_info.username.lower()}":
                    return True

    return False


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    chat = update.effective_chat
    chat_manager.update_chat(
        chat_id=chat.id,
        chat_type=chat.type,
        name=(
            chat.title
            if chat.title
            else f"Private chat with {update.effective_user.username}"
        ),
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not await should_bot_respond(update.message, context):
        return

    user = update.effective_user
    username = user.username
    user_id = user.id

    if USERS != "*" and username not in USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, action=ChatAction.TYPING
    )

    # –üÔøΩÔøΩ–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    thread_info = user_threads.get(user_id)
    if thread_info is None or not await check_thread_exists(thread_info.thread_id):
        thread = await client.beta.threads.create()
        await update_thread_access(user_id, thread.id)
        logging.info(f"Created new thread {thread.id} for user {user_id}")
        thread_id = thread.id
    else:
        thread_id = thread_info.thread_id
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
        await update_thread_access(user_id, thread_id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Thread
    await client.beta.threads.messages.create(
        thread_id=thread_id, role="user", content=update.message.text
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º Thread
    run = await client.beta.threads.runs.create(
        thread_id=thread_id, assistant_id=ASSISTANT_ID
    )

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    while True:
        run = await client.beta.threads.runs.retrieve(
            thread_id=thread_id, run_id=run.id
        )
        if run.completed_at:
            break
        await asyncio.sleep(2)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    messages = await client.beta.threads.messages.list(thread_id=thread_id)
    response = messages.data[0].content[0].text.value

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(response)


async def init_bot(application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º"""
    global bot_info
    bot_info = await application.bot.get_me()
    logging.info(f"Bot initialized: @{bot_info.username}")


async def post_init(application: Application) -> None:
    """–ü–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await init_bot(application)


async def get_chat_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ"""
    chat = update.effective_chat
    user = update.effective_user

    info_message = (
        f"üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
        f"ID —á–∞—Ç–∞: {chat.id}\n"
        f"–¢–∏–ø —á–∞—Ç–∞: {chat.type}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title if chat.title else '–õ–∏—á–Ω—ã–π —á–∞—Ç'}\n\n"
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}\n"
        f"Username: @{user.username if user.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
    )

    await update.message.reply_text(info_message)


async def get_admin_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = update.effective_user
    if USERS != "*" and user.username not in USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    message = "ü§ñ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≥–¥–µ —è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n\n"
    found_chats = False

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç
        updates = await context.bot.get_updates(offset=-1, timeout=1)
        my_chats = set()

        for upd in updates:
            if upd.my_chat_member:
                chat = upd.my_chat_member.chat
                if chat.type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]:
                    member = await context.bot.get_chat_member(chat.id, context.bot.id)
                    if member.status in ["administrator", "creator"]:
                        found_chats = True
                        message += (
                            f"üìå {chat.title}\n"
                            f"ID: {chat.id}\n"
                            f"–¢–∏–ø: {chat.type}\n"
                            f"–°—Ç–∞—Ç—É—Å: {member.status}\n\n"
                        )

        if not found_chats:
            message = "‚ùå –Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ."

        await update.message.reply_text(message)

    except Exception as e:
        logging.error(f"Error in get_admin_chats: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø."
        )


async def list_known_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    user = update.effective_user
    if USERS != "*" and user.username not in USERS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    chats = chat_manager.get_all_chats()
    if not chats:
        await update.message.reply_text("üìù –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    message = "üìù –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∞—Ç—ã:\n\n"
    for chat_id, info in chats.items():
        message += (
            f"üìå {info.name}\n"
            f"ID: {chat_id}\n"
            f"–¢–∏–ø: {info.chat_type}\n"
            f"–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {info.first_seen}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {info.last_message}\n\n"
        )

    await update.message.reply_text(message)


def main():
    # –í–∫–ª—é—á–∞–µ–º job_queue –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .job_queue(JobQueue())
        .post_init(post_init)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        .build()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("chatinfo", get_chat_info))
    application.add_handler(CommandHandler("adminchats", get_admin_chats))
    application.add_handler(CommandHandler("listchats", list_known_chats))

    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)
    application.add_handler(message_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∫ job –≤ application
    async def cleanup_job(context: ContextTypes.DEFAULT_TYPE):
        await cleanup_old_threads()

    application.job_queue.run_repeating(cleanup_job, interval=3600)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
